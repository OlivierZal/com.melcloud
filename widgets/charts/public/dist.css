/*! tailwindcss v4.1.5 | MIT License | https://tailwindcss.com */
@import url('https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap');
@layer properties;
.diff {
  position: relative;
  display: grid;
  width: 100%;
  overflow: hidden;
  webkit-user-select: none;
  user-select: none;
  direction: ltr;
  container-type: inline-size;
  grid-template-columns: auto 1fr;
  &:focus-visible, &:has(.diff-item-1:focus-visible) {
    outline-style: var(--tw-outline-style);
    outline-width: 2px;
    outline-offset: 1px;
    outline-color: var(--color-base-content);
  }
  &:focus-visible {
    outline-style: var(--tw-outline-style);
    outline-width: 2px;
    outline-offset: 1px;
    outline-color: var(--color-base-content);
    .diff-resizer {
      min-width: 90cqi;
      max-width: 90cqi;
    }
  }
  &:has(.diff-item-2:focus-visible) {
    outline-style: var(--tw-outline-style);
    outline-width: 2px;
    outline-offset: 1px;
    .diff-resizer {
      min-width: 10cqi;
      max-width: 10cqi;
    }
  }
  @supports (-webkit-overflow-scrolling: touch) and (overflow: -webkit-paged-x) {
    &:focus {
      .diff-resizer {
        min-width: 10cqi;
        max-width: 10cqi;
      }
    }
    &:has(.diff-item-1:focus) {
      .diff-resizer {
        min-width: 90cqi;
        max-width: 90cqi;
      }
    }
  }
}
.dropdown {
  position: relative;
  display: inline-block;
  position-area: var(--anchor-v, bottom) var(--anchor-h, span-right);
  & > *:not(summary):focus {
    --tw-outline-style: none;
    outline-style: none;
    @media (forced-colors: active) {
      outline: 2px solid transparent;
      outline-offset: 2px;
    }
  }
  .dropdown-content {
    position: absolute;
  }
  &:not(details, .dropdown-open, .dropdown-hover:hover, :focus-within) {
    .dropdown-content {
      display: none;
      transform-origin: top;
      opacity: 0%;
      scale: 95%;
    }
  }
  &[popover], .dropdown-content {
    z-index: 999;
    animation: dropdown 0.2s;
    transition-property: opacity, scale, display;
    transition-behavior: allow-discrete;
    transition-duration: 0.2s;
    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
  }
  @starting-style {
    &[popover], .dropdown-content {
      scale: 95%;
      opacity: 0;
    }
  }
  &.dropdown-open, &:not(.dropdown-hover):focus, &:focus-within {
    > [tabindex]:first-child {
      pointer-events: none;
    }
    .dropdown-content {
      opacity: 100%;
    }
  }
  &.dropdown-hover:hover {
    .dropdown-content {
      opacity: 100%;
      scale: 100%;
    }
  }
  &:is(details) {
    summary {
      &::-webkit-details-marker {
        display: none;
      }
    }
  }
  &.dropdown-open, &:focus, &:focus-within {
    .dropdown-content {
      scale: 100%;
    }
  }
  &:where([popover]) {
    background: #0000;
  }
  &[popover] {
    position: fixed;
    color: inherit;
    @supports not (position-area: bottom) {
      margin: auto;
      &.dropdown-open:not(:popover-open) {
        display: none;
        transform-origin: top;
        opacity: 0%;
        scale: 95%;
      }
      &::backdrop {
        background-color: color-mix(in oklab, #000 30%, #0000);
      }
    }
    &:not(.dropdown-open, :popover-open) {
      display: none;
      transform-origin: top;
      opacity: 0%;
      scale: 95%;
    }
  }
}
.btn {
  :where(&) {
    width: unset;
  }
  display: inline-flex;
  flex-shrink: 0;
  cursor: pointer;
  flex-wrap: nowrap;
  align-items: center;
  justify-content: center;
  gap: calc(0.25rem * 1.5);
  text-align: center;
  vertical-align: middle;
  outline-offset: 2px;
  webkit-user-select: none;
  user-select: none;
  padding-inline: var(--btn-p);
  color: var(--btn-fg);
  --tw-prose-links: var(--btn-fg);
  height: var(--size);
  font-size: var(--fontsize, 0.875rem);
  font-weight: 600;
  outline-color: var(--btn-color, var(--color-base-content));
  transition-property: color, background-color, border-color, box-shadow;
  transition-timing-function: cubic-bezier(0, 0, 0.2, 1);
  transition-duration: 0.2s;
  border-start-start-radius: var(--join-ss, var(--radius-field));
  border-start-end-radius: var(--join-se, var(--radius-field));
  border-end-start-radius: var(--join-es, var(--radius-field));
  border-end-end-radius: var(--join-ee, var(--radius-field));
  background-color: var(--btn-bg);
  background-size: auto, calc(var(--noise) * 100%);
  background-image: none, var(--btn-noise);
  border-width: var(--border);
  border-style: solid;
  border-color: var(--btn-border);
  text-shadow: 0 0.5px oklch(100% 0 0 / calc(var(--depth) * 0.15));
  touch-action: manipulation;
  box-shadow: 0 0.5px 0 0.5px oklch(100% 0 0 / calc(var(--depth) * 6%)) inset, var(--btn-shadow);
  --size: calc(var(--size-field, 0.25rem) * 10);
  --btn-bg: var(--btn-color, var(--color-base-200));
  --btn-fg: var(--color-base-content);
  --btn-p: 1rem;
  --btn-border: var(--btn-bg);
  @supports (color: color-mix(in lab, red, red)) {
    --btn-border: color-mix(in oklab, var(--btn-bg), #000 calc(var(--depth) * 5%));
  }
  --btn-shadow: 0 3px 2px -2px var(--btn-bg),
    0 4px 3px -2px var(--btn-bg);
  @supports (color: color-mix(in lab, red, red)) {
    --btn-shadow: 0 3px 2px -2px color-mix(in oklab, var(--btn-bg) calc(var(--depth) * 30%), #0000),
    0 4px 3px -2px color-mix(in oklab, var(--btn-bg) calc(var(--depth) * 30%), #0000);
  }
  --btn-noise: var(--fx-noise);
  .prose & {
    text-decoration-line: none;
  }
  @media (hover: hover) {
    &:hover {
      --btn-bg: var(--btn-color, var(--color-base-200));
      @supports (color: color-mix(in lab, red, red)) {
        --btn-bg: color-mix(in oklab, var(--btn-color, var(--color-base-200)), #000 7%);
      }
    }
  }
  &:focus-visible {
    outline-width: 2px;
    outline-style: solid;
    isolation: isolate;
  }
  &:active:not(.btn-active) {
    translate: 0 0.5px;
    --btn-bg: var(--btn-color, var(--color-base-200));
    @supports (color: color-mix(in lab, red, red)) {
      --btn-bg: color-mix(in oklab, var(--btn-color, var(--color-base-200)), #000 5%);
    }
    --btn-border: var(--btn-color, var(--color-base-200));
    @supports (color: color-mix(in lab, red, red)) {
      --btn-border: color-mix(in oklab, var(--btn-color, var(--color-base-200)), #000 7%);
    }
    --btn-shadow: 0 0 0 0 oklch(0% 0 0/0), 0 0 0 0 oklch(0% 0 0/0);
  }
  &:is(:disabled, [disabled], .btn-disabled) {
    &:not(.btn-link, .btn-ghost) {
      background-color: var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        background-color: color-mix(in oklab, var(--color-base-content) 10%, transparent);
      }
      box-shadow: none;
    }
    pointer-events: none;
    --btn-border: #0000;
    --btn-noise: none;
    --btn-fg: var(--color-base-content);
    @supports (color: color-mix(in lab, red, red)) {
      --btn-fg: color-mix(in oklch, var(--color-base-content) 20%, #0000);
    }
    @media (hover: hover) {
      &:hover {
        pointer-events: none;
        background-color: var(--color-neutral);
        @supports (color: color-mix(in lab, red, red)) {
          background-color: color-mix(in oklab, var(--color-neutral) 20%, transparent);
        }
        --btn-border: #0000;
        --btn-fg: var(--color-base-content);
        @supports (color: color-mix(in lab, red, red)) {
          --btn-fg: color-mix(in oklch, var(--color-base-content) 20%, #0000);
        }
      }
    }
  }
  &:is(input[type="checkbox"], input[type="radio"]) {
    appearance: none;
    &::after {
      content: attr(aria-label);
    }
  }
  &:where(input:checked:not(.filter .btn)) {
    --btn-color: var(--color-primary);
    --btn-fg: var(--color-primary-content);
    isolation: isolate;
  }
}
.loading {
  pointer-events: none;
  display: inline-block;
  aspect-ratio: 1 / 1;
  background-color: currentColor;
  vertical-align: middle;
  width: calc(var(--size-selector, 0.25rem) * 6);
  mask-size: 100%;
  mask-repeat: no-repeat;
  mask-position: center;
  mask-image: url("data:image/svg+xml,%3Csvg width='24' height='24' stroke='black' viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg'%3E%3Cg transform-origin='center'%3E%3Ccircle cx='12' cy='12' r='9.5' fill='none' stroke-width='3' stroke-linecap='round'%3E%3CanimateTransform attributeName='transform' type='rotate' from='0 12 12' to='360 12 12' dur='2s' repeatCount='indefinite'/%3E%3Canimate attributeName='stroke-dasharray' values='0,150;42,150;42,150' keyTimes='0;0.475;1' dur='1.5s' repeatCount='indefinite'/%3E%3Canimate attributeName='stroke-dashoffset' values='0;-16;-59' keyTimes='0;0.475;1' dur='1.5s' repeatCount='indefinite'/%3E%3C/circle%3E%3C/g%3E%3C/svg%3E");
}
.visible {
  visibility: visible;
}
.list {
  display: flex;
  flex-direction: column;
  font-size: 0.875rem;
  :where(.list-row) {
    --list-grid-cols: minmax(0, auto) 1fr;
    position: relative;
    display: grid;
    grid-auto-flow: column;
    gap: calc(0.25rem * 4);
    border-radius: var(--radius-box);
    padding: calc(0.25rem * 4);
    word-break: break-word;
    grid-template-columns: var(--list-grid-cols);
    &:has(.list-col-grow:nth-child(1)) {
      --list-grid-cols: 1fr;
    }
    &:has(.list-col-grow:nth-child(2)) {
      --list-grid-cols: minmax(0, auto) 1fr;
    }
    &:has(.list-col-grow:nth-child(3)) {
      --list-grid-cols: minmax(0, auto) minmax(0, auto) 1fr;
    }
    &:has(.list-col-grow:nth-child(4)) {
      --list-grid-cols: minmax(0, auto) minmax(0, auto) minmax(0, auto) 1fr;
    }
    &:has(.list-col-grow:nth-child(5)) {
      --list-grid-cols: minmax(0, auto) minmax(0, auto) minmax(0, auto) minmax(0, auto) 1fr;
    }
    &:has(.list-col-grow:nth-child(6)) {
      --list-grid-cols: minmax(0, auto) minmax(0, auto) minmax(0, auto) minmax(0, auto)
        minmax(0, auto) 1fr;
    }
    :not(.list-col-wrap) {
      grid-row-start: 1;
    }
  }
  & > :not(:last-child) {
    &.list-row, .list-row {
      &:after {
        content: "";
        border-bottom: var(--border) solid;
        inset-inline: var(--radius-box);
        position: absolute;
        bottom: calc(0.25rem * 0);
        border-color: var(--color-base-content);
        @supports (color: color-mix(in lab, red, red)) {
          border-color: color-mix(in oklab, var(--color-base-content) 5%, transparent);
        }
      }
    }
  }
}
.input {
  cursor: text;
  border: var(--border) solid #0000;
  position: relative;
  display: inline-flex;
  flex-shrink: 1;
  appearance: none;
  align-items: center;
  gap: calc(0.25rem * 2);
  background-color: var(--color-base-100);
  padding-inline: calc(0.25rem * 3);
  vertical-align: middle;
  white-space: nowrap;
  width: clamp(3rem, 20rem, 100%);
  height: var(--size);
  font-size: 0.875rem;
  border-start-start-radius: var(--join-ss, var(--radius-field));
  border-start-end-radius: var(--join-se, var(--radius-field));
  border-end-start-radius: var(--join-es, var(--radius-field));
  border-end-end-radius: var(--join-ee, var(--radius-field));
  border-color: var(--input-color);
  box-shadow: 0 1px var(--input-color) inset, 0 -1px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset;
  @supports (color: color-mix(in lab, red, red)) {
    box-shadow: 0 1px color-mix(in oklab, var(--input-color) calc(var(--depth) * 10%), #0000) inset, 0 -1px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset;
  }
  --size: calc(var(--size-field, 0.25rem) * 10);
  --input-color: var(--color-base-content);
  @supports (color: color-mix(in lab, red, red)) {
    --input-color: color-mix(in oklab, var(--color-base-content) 20%, #0000);
  }
  &:where(input) {
    display: inline-flex;
  }
  :where(input) {
    display: inline-flex;
    height: 100%;
    width: 100%;
    appearance: none;
    background-color: transparent;
    border: none;
    &:focus, &:focus-within {
      --tw-outline-style: none;
      outline-style: none;
      @media (forced-colors: active) {
        outline: 2px solid transparent;
        outline-offset: 2px;
      }
    }
  }
  :where(input[type="date"]) {
    display: inline-block;
  }
  &:focus, &:focus-within {
    --input-color: var(--color-base-content);
    box-shadow: 0 1px var(--input-color);
    @supports (color: color-mix(in lab, red, red)) {
      box-shadow: 0 1px color-mix(in oklab, var(--input-color) calc(var(--depth) * 10%), #0000);
    }
    outline: 2px solid var(--input-color);
    outline-offset: 2px;
    isolation: isolate;
    z-index: 1;
  }
  &:has(> input[disabled]), &:is(:disabled, [disabled]) {
    cursor: not-allowed;
    border-color: var(--color-base-200);
    background-color: var(--color-base-200);
    color: var(--color-base-content);
    @supports (color: color-mix(in lab, red, red)) {
      color: color-mix(in oklab, var(--color-base-content) 40%, transparent);
    }
    &::placeholder {
      color: var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        color: color-mix(in oklab, var(--color-base-content) 20%, transparent);
      }
    }
    box-shadow: none;
  }
  &:has(> input[disabled]) > input[disabled] {
    cursor: not-allowed;
  }
  &::-webkit-date-and-time-value {
    text-align: inherit;
  }
  &[type="number"] {
    &::-webkit-inner-spin-button {
      margin-block: calc(0.25rem * -3);
      margin-inline-end: calc(0.25rem * -3);
    }
  }
  &::-webkit-calendar-picker-indicator {
    position: absolute;
    inset-inline-end: 0.75em;
  }
}
.table {
  font-size: 0.875rem;
  position: relative;
  width: 100%;
  border-radius: var(--radius-box);
  text-align: left;
  &:where(:dir(rtl), [dir="rtl"], [dir="rtl"] *) {
    text-align: right;
  }
  tr.row-hover {
    &, &:nth-child(even) {
      &:hover {
        @media (hover: hover) {
          background-color: var(--color-base-200);
        }
      }
    }
  }
  :where(th, td) {
    padding-inline: calc(0.25rem * 4);
    padding-block: calc(0.25rem * 3);
    vertical-align: middle;
  }
  :where(thead, tfoot) {
    white-space: nowrap;
    color: var(--color-base-content);
    @supports (color: color-mix(in lab, red, red)) {
      color: color-mix(in oklab, var(--color-base-content) 60%, transparent);
    }
    font-size: 0.875rem;
    font-weight: 600;
  }
  :where(tfoot) {
    border-top: var(--border) solid var(--color-base-content);
    @supports (color: color-mix(in lab, red, red)) {
      border-top: var(--border) solid color-mix(in oklch, var(--color-base-content) 5%, #0000);
    }
  }
  :where(.table-pin-rows thead tr) {
    position: sticky;
    top: calc(0.25rem * 0);
    z-index: 1;
    background-color: var(--color-base-100);
  }
  :where(.table-pin-rows tfoot tr) {
    position: sticky;
    bottom: calc(0.25rem * 0);
    z-index: 1;
    background-color: var(--color-base-100);
  }
  :where(.table-pin-cols tr th) {
    position: sticky;
    right: calc(0.25rem * 0);
    left: calc(0.25rem * 0);
    background-color: var(--color-base-100);
  }
  :where(thead tr, tbody tr:not(:last-child)) {
    border-bottom: var(--border) solid var(--color-base-content);
    @supports (color: color-mix(in lab, red, red)) {
      border-bottom: var(--border) solid color-mix(in oklch, var(--color-base-content) 5%, #0000);
    }
  }
}
.steps {
  display: inline-grid;
  grid-auto-flow: column;
  overflow: hidden;
  overflow-x: auto;
  counter-reset: step;
  grid-auto-columns: 1fr;
  .step {
    display: grid;
    grid-template-columns: repeat(1, minmax(0, 1fr));
    grid-template-columns: auto;
    grid-template-rows: repeat(2, minmax(0, 1fr));
    grid-template-rows: 40px 1fr;
    place-items: center;
    text-align: center;
    min-width: 4rem;
    --step-bg: var(--color-base-300);
    --step-fg: var(--color-base-content);
    &:before {
      top: calc(0.25rem * 0);
      grid-column-start: 1;
      grid-row-start: 1;
      height: calc(0.25rem * 2);
      width: 100%;
      border: 1px solid;
      color: var(--step-bg);
      background-color: var(--step-bg);
      --tw-content: "";
      content: var(--tw-content);
      margin-inline-start: -100%;
    }
    > .step-icon, &:not(:has(.step-icon)):after {
      content: counter(step);
      counter-increment: step;
      z-index: 1;
      color: var(--step-fg);
      background-color: var(--step-bg);
      border: 1px solid var(--step-bg);
      position: relative;
      grid-column-start: 1;
      grid-row-start: 1;
      display: grid;
      height: calc(0.25rem * 8);
      width: calc(0.25rem * 8);
      place-items: center;
      place-self: center;
      border-radius: calc(infinity * 1px);
    }
    &:first-child:before {
      content: none;
    }
    &[data-content]:after {
      content: attr(data-content);
    }
  }
  .step-neutral {
    + .step-neutral:before, &:after, > .step-icon {
      --step-bg: var(--color-neutral);
      --step-fg: var(--color-neutral-content);
    }
  }
  .step-primary {
    + .step-primary:before, &:after, > .step-icon {
      --step-bg: var(--color-primary);
      --step-fg: var(--color-primary-content);
    }
  }
  .step-secondary {
    + .step-secondary:before, &:after, > .step-icon {
      --step-bg: var(--color-secondary);
      --step-fg: var(--color-secondary-content);
    }
  }
  .step-accent {
    + .step-accent:before, &:after, > .step-icon {
      --step-bg: var(--color-accent);
      --step-fg: var(--color-accent-content);
    }
  }
  .step-info {
    + .step-info:before, &:after, > .step-icon {
      --step-bg: var(--color-info);
      --step-fg: var(--color-info-content);
    }
  }
  .step-success {
    + .step-success:before, &:after, > .step-icon {
      --step-bg: var(--color-success);
      --step-fg: var(--color-success-content);
    }
  }
  .step-warning {
    + .step-warning:before, &:after, > .step-icon {
      --step-bg: var(--color-warning);
      --step-fg: var(--color-warning-content);
    }
  }
  .step-error {
    + .step-error:before, &:after, > .step-icon {
      --step-bg: var(--color-error);
      --step-fg: var(--color-error-content);
    }
  }
}
.range {
  appearance: none;
  webkit-appearance: none;
  --range-thumb: var(--color-base-100);
  --range-thumb-size: calc(var(--size-selector, 0.25rem) * 6);
  --range-progress: currentColor;
  --range-fill: 1;
  --range-p: 0.25rem;
  --range-bg: currentColor;
  @supports (color: color-mix(in lab, red, red)) {
    --range-bg: color-mix(in oklab, currentColor 10%, #0000);
  }
  cursor: pointer;
  overflow: hidden;
  background-color: transparent;
  vertical-align: middle;
  width: clamp(3rem, 20rem, 100%);
  --radius-selector-max: calc(
    var(--radius-selector) + var(--radius-selector) + var(--radius-selector)
  );
  border-radius: calc(var(--radius-selector) + min(var(--range-p), var(--radius-selector-max)));
  border: none;
  height: var(--range-thumb-size);
  [dir="rtl"] & {
    --range-dir: -1;
  }
  &:focus {
    outline: none;
  }
  &:focus-visible {
    outline: 2px solid;
    outline-offset: 2px;
  }
  &::-webkit-slider-runnable-track {
    width: 100%;
    background-color: var(--range-bg);
    border-radius: var(--radius-selector);
    height: calc(var(--range-thumb-size) * 0.5);
  }
  @media (forced-colors: active) {
    &::-webkit-slider-runnable-track {
      border: 1px solid;
    }
  }
  @media (forced-colors: active) {
    &::-moz-range-track {
      border: 1px solid;
    }
  }
  &::-webkit-slider-thumb {
    position: relative;
    box-sizing: border-box;
    border-radius: calc(var(--radius-selector) + min(var(--range-p), var(--radius-selector-max)));
    background-color: currentColor;
    height: var(--range-thumb-size);
    width: var(--range-thumb-size);
    border: var(--range-p) solid;
    appearance: none;
    webkit-appearance: none;
    top: 50%;
    color: var(--range-progress);
    transform: translateY(-50%);
    box-shadow: 0 -1px oklch(0% 0 0 / calc(var(--depth) * 0.1)) inset, 0 8px 0 -4px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset, 0 1px currentColor, 0 0 0 2rem var(--range-thumb) inset, calc((var(--range-dir, 1) * -100rem) - (var(--range-dir, 1) * var(--range-thumb-size) / 2)) 0 0 calc(100rem * var(--range-fill));
    @supports (color: color-mix(in lab, red, red)) {
      box-shadow: 0 -1px oklch(0% 0 0 / calc(var(--depth) * 0.1)) inset, 0 8px 0 -4px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset, 0 1px color-mix(in oklab, currentColor calc(var(--depth) * 10%), #0000), 0 0 0 2rem var(--range-thumb) inset, calc((var(--range-dir, 1) * -100rem) - (var(--range-dir, 1) * var(--range-thumb-size) / 2)) 0 0 calc(100rem * var(--range-fill));
    }
  }
  &::-moz-range-track {
    width: 100%;
    background-color: var(--range-bg);
    border-radius: var(--radius-selector);
    height: calc(var(--range-thumb-size) * 0.5);
  }
  &::-moz-range-thumb {
    position: relative;
    box-sizing: border-box;
    border-radius: calc(var(--radius-selector) + min(var(--range-p), var(--radius-selector-max)));
    background-color: currentColor;
    height: var(--range-thumb-size);
    width: var(--range-thumb-size);
    border: var(--range-p) solid;
    top: 50%;
    color: var(--range-progress);
    box-shadow: 0 -1px oklch(0% 0 0 / calc(var(--depth) * 0.1)) inset, 0 8px 0 -4px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset, 0 1px currentColor, 0 0 0 2rem var(--range-thumb) inset, calc((var(--range-dir, 1) * -100rem) - (var(--range-dir, 1) * var(--range-thumb-size) / 2)) 0 0 calc(100rem * var(--range-fill));
    @supports (color: color-mix(in lab, red, red)) {
      box-shadow: 0 -1px oklch(0% 0 0 / calc(var(--depth) * 0.1)) inset, 0 8px 0 -4px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset, 0 1px color-mix(in oklab, currentColor calc(var(--depth) * 10%), #0000), 0 0 0 2rem var(--range-thumb) inset, calc((var(--range-dir, 1) * -100rem) - (var(--range-dir, 1) * var(--range-thumb-size) / 2)) 0 0 calc(100rem * var(--range-fill));
    }
  }
  &:disabled {
    cursor: not-allowed;
    opacity: 30%;
  }
}
.select {
  border: var(--border) solid #0000;
  position: relative;
  display: inline-flex;
  flex-shrink: 1;
  appearance: none;
  align-items: center;
  gap: calc(0.25rem * 1.5);
  background-color: var(--color-base-100);
  padding-inline-start: calc(0.25rem * 4);
  padding-inline-end: calc(0.25rem * 7);
  vertical-align: middle;
  width: clamp(3rem, 20rem, 100%);
  height: var(--size);
  font-size: 0.875rem;
  border-start-start-radius: var(--join-ss, var(--radius-field));
  border-start-end-radius: var(--join-se, var(--radius-field));
  border-end-start-radius: var(--join-es, var(--radius-field));
  border-end-end-radius: var(--join-ee, var(--radius-field));
  background-image: linear-gradient(45deg, #0000 50%, currentColor 50%), linear-gradient(135deg, currentColor 50%, #0000 50%);
  background-position: calc(100% - 20px) calc(1px + 50%), calc(100% - 16.1px) calc(1px + 50%);
  background-size: 4px 4px, 4px 4px;
  background-repeat: no-repeat;
  text-overflow: ellipsis;
  box-shadow: 0 1px var(--input-color) inset, 0 -1px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset;
  @supports (color: color-mix(in lab, red, red)) {
    box-shadow: 0 1px color-mix(in oklab, var(--input-color) calc(var(--depth) * 10%), #0000) inset, 0 -1px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset;
  }
  border-color: var(--input-color);
  --input-color: var(--color-base-content);
  @supports (color: color-mix(in lab, red, red)) {
    --input-color: color-mix(in oklab, var(--color-base-content) 20%, #0000);
  }
  --size: calc(var(--size-field, 0.25rem) * 10);
  [dir="rtl"] & {
    background-position: calc(0% + 12px) calc(1px + 50%), calc(0% + 16px) calc(1px + 50%);
  }
  select {
    margin-inline-start: calc(0.25rem * -4);
    margin-inline-end: calc(0.25rem * -7);
    width: calc(100% + 2.75rem);
    appearance: none;
    padding-inline-start: calc(0.25rem * 4);
    padding-inline-end: calc(0.25rem * 7);
    height: calc(100% - 2px);
    background: inherit;
    border-radius: inherit;
    border-style: none;
    &:focus, &:focus-within {
      --tw-outline-style: none;
      outline-style: none;
      @media (forced-colors: active) {
        outline: 2px solid transparent;
        outline-offset: 2px;
      }
    }
    &:not(:last-child) {
      margin-inline-end: calc(0.25rem * -5.5);
      background-image: none;
    }
  }
  &:focus, &:focus-within {
    --input-color: var(--color-base-content);
    box-shadow: 0 1px var(--input-color);
    @supports (color: color-mix(in lab, red, red)) {
      box-shadow: 0 1px color-mix(in oklab, var(--input-color) calc(var(--depth) * 10%), #0000);
    }
    outline: 2px solid var(--input-color);
    outline-offset: 2px;
    isolation: isolate;
    z-index: 1;
  }
  &:has(> select[disabled]), &:is(:disabled, [disabled]) {
    cursor: not-allowed;
    border-color: var(--color-base-200);
    background-color: var(--color-base-200);
    color: var(--color-base-content);
    @supports (color: color-mix(in lab, red, red)) {
      color: color-mix(in oklab, var(--color-base-content) 40%, transparent);
    }
    &::placeholder {
      color: var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        color: color-mix(in oklab, var(--color-base-content) 20%, transparent);
      }
    }
  }
  &:has(> select[disabled]) > select[disabled] {
    cursor: not-allowed;
  }
}
.checkbox {
  border: var(--border) solid var(--input-color, var(--color-base-content));
  @supports (color: color-mix(in lab, red, red)) {
    border: var(--border) solid var(--input-color, color-mix(in oklab, var(--color-base-content) 20%, #0000));
  }
  position: relative;
  flex-shrink: 0;
  cursor: pointer;
  appearance: none;
  border-radius: var(--radius-selector);
  padding: calc(0.25rem * 1);
  vertical-align: middle;
  color: var(--color-base-content);
  box-shadow: 0 1px oklch(0% 0 0 / calc(var(--depth) * 0.1)) inset, 0 0 #0000 inset, 0 0 #0000;
  transition: background-color 0.2s, box-shadow 0.2s;
  --size: calc(var(--size-selector, 0.25rem) * 6);
  width: var(--size);
  height: var(--size);
  background-size: auto, calc(var(--noise) * 100%);
  background-image: none, var(--fx-noise);
  &:before {
    --tw-content: "";
    content: var(--tw-content);
    display: block;
    width: 100%;
    height: 100%;
    rotate: 45deg;
    background-color: currentColor;
    opacity: 0%;
    transition: clip-path 0.3s, opacity 0.1s, rotate 0.3s, translate 0.3s;
    transition-delay: 0.1s;
    clip-path: polygon(20% 100%, 20% 80%, 50% 80%, 50% 80%, 70% 80%, 70% 100%);
    box-shadow: 0px 3px 0 0px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset;
    font-size: 1rem;
    line-height: 0.75;
  }
  &:focus-visible {
    outline: 2px solid var(--input-color, currentColor);
    outline-offset: 2px;
  }
  &:checked, &[aria-checked="true"] {
    background-color: var(--input-color, #0000);
    box-shadow: 0 0 #0000 inset, 0 8px 0 -4px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset, 0 1px oklch(0% 0 0 / calc(var(--depth) * 0.1));
    &:before {
      clip-path: polygon(20% 100%, 20% 80%, 50% 80%, 50% 0%, 70% 0%, 70% 100%);
      opacity: 100%;
    }
    @media (forced-colors: active) {
      &:before {
        rotate: 0deg;
        background-color: transparent;
        --tw-content: "✔︎";
        clip-path: none;
      }
    }
    @media print {
      &:before {
        rotate: 0deg;
        background-color: transparent;
        --tw-content: "✔︎";
        clip-path: none;
      }
    }
  }
  &:indeterminate {
    &:before {
      rotate: 0deg;
      opacity: 100%;
      translate: 0 -35%;
      clip-path: polygon(20% 100%, 20% 80%, 50% 80%, 50% 80%, 80% 80%, 80% 100%);
    }
  }
  &:disabled {
    cursor: not-allowed;
    opacity: 20%;
  }
}
.progress {
  position: relative;
  height: calc(0.25rem * 2);
  width: 100%;
  appearance: none;
  overflow: hidden;
  border-radius: var(--radius-box);
  background-color: currentColor;
  @supports (color: color-mix(in lab, red, red)) {
    background-color: color-mix(in oklab, currentColor 20%, transparent);
  }
  color: var(--color-base-content);
  &:indeterminate {
    background-image: repeating-linear-gradient( 90deg, currentColor -1%, currentColor 10%, #0000 10%, #0000 90% );
    background-size: 200%;
    background-position-x: 15%;
    animation: progress 5s ease-in-out infinite;
    @supports (-moz-appearance: none) {
      &::-moz-progress-bar {
        background-color: transparent;
        background-image: repeating-linear-gradient( 90deg, currentColor -1%, currentColor 10%, #0000 10%, #0000 90% );
        background-size: 200%;
        background-position-x: 15%;
        animation: progress 5s ease-in-out infinite;
      }
    }
  }
  @supports (-moz-appearance: none) {
    &::-moz-progress-bar {
      border-radius: var(--radius-box);
      background-color: currentColor;
    }
  }
  @supports (-webkit-appearance: none) {
    &::-webkit-progress-bar {
      border-radius: var(--radius-box);
      background-color: transparent;
    }
    &::-webkit-progress-value {
      border-radius: var(--radius-box);
      background-color: currentColor;
    }
  }
}
.absolute {
  position: absolute;
}
.fixed {
  position: fixed;
}
.static {
  position: static;
}
.container {
  width: 100%;
}
.filter {
  display: flex;
  flex-wrap: wrap;
  input[type="radio"] {
    width: auto;
  }
  input {
    overflow: hidden;
    opacity: 100%;
    scale: 1;
    transition: margin 0.1s, opacity 0.3s, padding 0.3s, border-width 0.1s;
    &:not(:last-child) {
      margin-inline-end: calc(0.25rem * 1);
    }
    &.filter-reset {
      aspect-ratio: 1 / 1;
      &::after {
        content: "×";
      }
    }
  }
  &:not(:has(input:checked:not(.filter-reset))) {
    .filter-reset, input[type="reset"] {
      scale: 0;
      border-width: 0;
      margin-inline: calc(0.25rem * 0);
      width: calc(0.25rem * 0);
      padding-inline: calc(0.25rem * 0);
      opacity: 0%;
    }
  }
  &:has(input:checked:not(.filter-reset)) {
    input:not(:checked, .filter-reset, input[type="reset"]) {
      scale: 0;
      border-width: 0;
      margin-inline: calc(0.25rem * 0);
      width: calc(0.25rem * 0);
      padding-inline: calc(0.25rem * 0);
      opacity: 0%;
    }
  }
}
.label {
  display: inline-flex;
  align-items: center;
  gap: calc(0.25rem * 1.5);
  white-space: nowrap;
  color: currentColor;
  @supports (color: color-mix(in lab, red, red)) {
    color: color-mix(in oklab, currentColor 60%, transparent);
  }
  &:has(input) {
    cursor: pointer;
  }
  &:is(.input > *, .select > *) {
    display: flex;
    height: calc(100% - 0.5rem);
    align-items: center;
    padding-inline: calc(0.25rem * 3);
    white-space: nowrap;
    font-size: inherit;
    &:first-child {
      margin-inline-start: calc(0.25rem * -3);
      margin-inline-end: calc(0.25rem * 3);
      border-inline-end: var(--border) solid currentColor;
      @supports (color: color-mix(in lab, red, red)) {
        border-inline-end: var(--border) solid color-mix(in oklab, currentColor 10%, #0000);
      }
    }
    &:last-child {
      margin-inline-start: calc(0.25rem * 3);
      margin-inline-end: calc(0.25rem * -3);
      border-inline-start: var(--border) solid currentColor;
      @supports (color: color-mix(in lab, red, red)) {
        border-inline-start: var(--border) solid color-mix(in oklab, currentColor 10%, #0000);
      }
    }
  }
}
.status {
  display: inline-block;
  aspect-ratio: 1 / 1;
  width: calc(0.25rem * 2);
  height: calc(0.25rem * 2);
  border-radius: var(--radius-selector);
  background-color: var(--color-base-content);
  @supports (color: color-mix(in lab, red, red)) {
    background-color: color-mix(in oklab, var(--color-base-content) 20%, transparent);
  }
  background-position: center;
  background-repeat: no-repeat;
  vertical-align: middle;
  color: color-mix(in srgb, #000 30%, transparent);
  @supports (color: color-mix(in lab, red, red)) {
    color: var(--color-black);
    @supports (color: color-mix(in lab, red, red)) {
      color: color-mix(in oklab, var(--color-black) 30%, transparent);
    }
  }
  background-image: radial-gradient( circle at 35% 30%, oklch(1 0 0 / calc(var(--depth) * 0.5)), #0000 );
  box-shadow: 0 2px 3px -1px currentColor;
  @supports (color: color-mix(in lab, red, red)) {
    box-shadow: 0 2px 3px -1px color-mix(in oklab, currentColor calc(var(--depth) * 100%), #0000);
  }
}
.fieldset {
  display: grid;
  gap: calc(0.25rem * 1.5);
  padding-block: calc(0.25rem * 1);
  font-size: 0.75rem;
  grid-template-columns: 1fr;
  grid-auto-rows: max-content;
}
.block {
  display: block;
}
.contents {
  display: contents;
}
.flex {
  display: flex;
}
.grid {
  display: grid;
}
.hidden {
  display: none;
}
.inline {
  display: inline;
}
.table {
  display: table;
}
.w-1\/2 {
  width: calc(1/2 * 100%);
}
.transform {
  transform: var(--tw-rotate-x,) var(--tw-rotate-y,) var(--tw-rotate-z,) var(--tw-skew-x,) var(--tw-skew-y,);
}
.link {
  cursor: pointer;
  text-decoration-line: underline;
  &:focus {
    --tw-outline-style: none;
    outline-style: none;
    @media (forced-colors: active) {
      outline: 2px solid transparent;
      outline-offset: 2px;
    }
  }
  &:focus-visible {
    outline: 2px solid currentColor;
    outline-offset: 2px;
  }
}
.justify-between {
  justify-content: space-between;
}
.border-0 {
  border-style: var(--tw-border-style);
  border-width: 0px;
}
.select-ghost {
  background-color: transparent;
  transition: background-color 0.2s;
  box-shadow: none;
  border-color: #0000;
  &:focus, &:focus-within {
    background-color: var(--color-base-100);
    color: var(--color-base-content);
    border-color: #0000;
    box-shadow: none;
  }
}
.input-ghost {
  background-color: transparent;
  box-shadow: none;
  border-color: #0000;
  &:focus, &:focus-within {
    background-color: var(--color-base-100);
    color: var(--color-base-content);
    border-color: #0000;
    box-shadow: none;
  }
}
.text-default {
  font-size: var(--text-default);
  line-height: var(--tw-leading, var(--text-default--line-height));
}
.font-bold {
  --tw-font-weight: var(--font-weight-bold);
  font-weight: var(--font-weight-bold);
}
.font-medium {
  --tw-font-weight: var(--font-weight-medium);
  font-weight: var(--font-weight-medium);
}
.font-normal {
  --tw-font-weight: var(--font-weight-normal);
  font-weight: var(--font-weight-normal);
}
.text-blue {
  color: var(--color-blue);
}
.text-color {
  color: var(--color-color);
}
.text-danger {
  color: var(--color-danger);
}
.text-light {
  color: var(--color-light);
}
.capitalize {
  text-transform: capitalize;
}
.btn-ghost {
  &:not(.btn-active, :hover, :active:focus, :focus-visible) {
    --btn-shadow: "";
    --btn-bg: #0000;
    --btn-border: #0000;
    --btn-noise: none;
    &:not(:disabled, [disabled], .btn-disabled) {
      outline-color: currentColor;
      --btn-fg: currentColor;
    }
  }
}
.filter {
  filter: var(--tw-blur,) var(--tw-brightness,) var(--tw-contrast,) var(--tw-grayscale,) var(--tw-hue-rotate,) var(--tw-invert,) var(--tw-saturate,) var(--tw-sepia,) var(--tw-drop-shadow,);
}
:root, :host {
  --font-display: Roboto, sans-serif;
  --color-blue: var(--homey-text-color-blue);
  --color-color: var(--homey-text-color);
  --color-danger: var(--homey-text-color-danger);
  --color-light: var(--homey-text-color-light);
  --font-weight-bold: var(--homey-font-weight-bold);
  --font-weight-medium: var(--homey-font-weight-medium);
  --font-weight-normal: var(--homey-font-weight-regular);
  --text-default: var(--homey-font-size-default);
  --text-default--line-height: var(--homey-line-height-default);
}
#zones {
  text-align-last: center;
}
@layer base {
  :root:has( .modal-open, .modal[open], .modal:target, .modal-toggle:checked, .drawer:not([class*="drawer-open"]) > .drawer-toggle:checked ) {
    overflow: hidden;
  }
}
@layer base {
  :root, [data-theme] {
    background-color: var(--root-bg, var(--color-base-100));
    color: var(--color-base-content);
  }
}
@layer base {
  :root {
    scrollbar-color: currentColor #0000;
    @supports (color: color-mix(in lab, red, red)) {
      scrollbar-color: color-mix(in oklch, currentColor 35%, #0000) #0000;
    }
  }
}
@layer base {
  @property --radialprogress {
    syntax: "<percentage>";
    inherits: true;
    initial-value: 0%;
  }
}
@layer base {
  :where( :root:has( .modal-open, .modal[open], .modal:target, .modal-toggle:checked, .drawer:not(.drawer-open) > .drawer-toggle:checked ) ) {
    scrollbar-gutter: stable;
    background-image: linear-gradient(var(--color-base-100), var(--color-base-100));
    --root-bg: var(--color-base-100);
    @supports (color: color-mix(in lab, red, red)) {
      --root-bg: color-mix(in srgb, var(--color-base-100), oklch(0% 0 0) 40%);
    }
  }
  :where(.modal[open], .modal-open, .modal-toggle:checked + .modal):not(.modal-start, .modal-end) {
    scrollbar-gutter: stable;
  }
}
@layer base {
  :root {
    --fx-noise: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg'%3E%3Cfilter id='a'%3E%3CfeTurbulence type='fractalNoise' baseFrequency='1.34' numOctaves='4' stitchTiles='stitch'%3E%3C/feTurbulence%3E%3C/filter%3E%3Crect width='100%25' height='100%25' filter='url(%23a)' opacity='0.2'%3E%3C/rect%3E%3C/svg%3E");
  }
  .chat {
    --mask-chat: url("data:image/svg+xml,%3csvg width='13' height='13' xmlns='http://www.w3.org/2000/svg'%3e%3cpath fill='black' d='M0 11.5004C0 13.0004 2 13.0004 2 13.0004H12H13V0.00036329L12.5 0C12.5 0 11.977 2.09572 11.8581 2.50033C11.6075 3.35237 10.9149 4.22374 9 5.50036C6 7.50036 0 10.0004 0 11.5004Z'/%3e%3c/svg%3e");
  }
}
@keyframes dropdown {
  0% {
    opacity: 0;
  }
}
@keyframes progress {
  50% {
    background-position-x: -115%;
  }
}
@keyframes toast {
  0% {
    scale: 0.9;
    opacity: 0;
  }
  100% {
    scale: 1;
    opacity: 1;
  }
}
@keyframes rating {
  0%, 40% {
    scale: 1.1;
    filter: brightness(1.05) contrast(1.05);
  }
}
@keyframes radio {
  0% {
    padding: 5px;
  }
  50% {
    padding: 3px;
  }
}
@keyframes skeleton {
  0% {
    background-position: 150%;
  }
  100% {
    background-position: -50%;
  }
}
@property --tw-rotate-x {
  syntax: "*";
  inherits: false;
}
@property --tw-rotate-y {
  syntax: "*";
  inherits: false;
}
@property --tw-rotate-z {
  syntax: "*";
  inherits: false;
}
@property --tw-skew-x {
  syntax: "*";
  inherits: false;
}
@property --tw-skew-y {
  syntax: "*";
  inherits: false;
}
@property --tw-border-style {
  syntax: "*";
  inherits: false;
  initial-value: solid;
}
@property --tw-font-weight {
  syntax: "*";
  inherits: false;
}
@property --tw-blur {
  syntax: "*";
  inherits: false;
}
@property --tw-brightness {
  syntax: "*";
  inherits: false;
}
@property --tw-contrast {
  syntax: "*";
  inherits: false;
}
@property --tw-grayscale {
  syntax: "*";
  inherits: false;
}
@property --tw-hue-rotate {
  syntax: "*";
  inherits: false;
}
@property --tw-invert {
  syntax: "*";
  inherits: false;
}
@property --tw-opacity {
  syntax: "*";
  inherits: false;
}
@property --tw-saturate {
  syntax: "*";
  inherits: false;
}
@property --tw-sepia {
  syntax: "*";
  inherits: false;
}
@property --tw-drop-shadow {
  syntax: "*";
  inherits: false;
}
@property --tw-drop-shadow-color {
  syntax: "*";
  inherits: false;
}
@property --tw-drop-shadow-alpha {
  syntax: "<percentage>";
  inherits: false;
  initial-value: 100%;
}
@property --tw-drop-shadow-size {
  syntax: "*";
  inherits: false;
}
@layer properties {
  @supports ((-webkit-hyphens: none) and (not (margin-trim: inline))) or ((-moz-orient: inline) and (not (color:rgb(from red r g b)))) {
    *, ::before, ::after, ::backdrop {
      --tw-rotate-x: initial;
      --tw-rotate-y: initial;
      --tw-rotate-z: initial;
      --tw-skew-x: initial;
      --tw-skew-y: initial;
      --tw-border-style: solid;
      --tw-font-weight: initial;
      --tw-blur: initial;
      --tw-brightness: initial;
      --tw-contrast: initial;
      --tw-grayscale: initial;
      --tw-hue-rotate: initial;
      --tw-invert: initial;
      --tw-opacity: initial;
      --tw-saturate: initial;
      --tw-sepia: initial;
      --tw-drop-shadow: initial;
      --tw-drop-shadow-color: initial;
      --tw-drop-shadow-alpha: 100%;
      --tw-drop-shadow-size: initial;
    }
  }
}
